{"version":3,"sources":["components/Heading/Heading.js","components/Controls/Controls.js","Helpers/Controls.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","react_default","a","createElement","className","heading","Controls","_useState","useState","SpeechSynthesisUtterance","_useState2","Object","slicedToArray","message","setMessage","text","trim","length","speechSynthesis","cancel","onChange","event","target","name","value","changeHandler","rows","placeholder","type","step","max","onClick","preventDefault","speak","convertTextToSpeech","pause","resume","Layout","components_Heading_Heading","components_Controls_Controls","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAQeA,SANC,SAACC,GACb,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQJ,EAAMK,kBC8DrBC,EA/DE,SAACN,GAAU,IAAAO,EACIC,mBAAS,IAAIC,0BADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACnBM,EADmBH,EAAA,GACVI,EADUJ,EAAA,GAaxB,OAJmC,IAA/BG,EAAQE,KAAKC,OAAOC,QACpBC,gBAAgBC,SAIhBlB,EAAAC,EAAAC,cAAA,QAAMiB,SAAU,SAACC,GAAD,OAXE,SAACA,GACnBR,EAAQQ,EAAMC,OAAOC,MAAQF,EAAMC,OAAOE,MAC1CV,EAAWD,GASgBY,CAAcJ,KACrCpB,EAAAC,EAAAC,cAAA,YACIuB,KAAK,KACLtB,UAAU,oBACVmB,KAAK,OACLI,YAAY,gCAChB1B,EAAAC,EAAAC,cAAA,SACIyB,KAAK,SACLxB,UAAU,oBACVmB,KAAK,SACLI,YAAY,oBACZE,KAAK,MACLC,IAAI,MAER7B,EAAAC,EAAAC,cAAA,SACIyB,KAAK,SACLxB,UAAU,oBACVmB,KAAK,OACLI,YAAY,qBACZG,IAAI,OAER7B,EAAAC,EAAAC,cAAA,SACIyB,KAAK,SACLxB,UAAU,oBACVmB,KAAK,QACLI,YAAY,mBACZG,IAAI,MAER7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,UACIC,UAAU,uCACV2B,QAAS,SAACV,GAAD,OC/CM,SAACA,EAAOR,GACvCQ,EAAMW,iBACNd,gBAAgBe,MAAMpB,GD6CcqB,CAAoBb,EAAOR,KAFnD,QAKAZ,EAAAC,EAAAC,cAAA,UACIC,UAAU,4CACV2B,QAAS,SAACV,GAAD,OC/CR,SAACA,GAClBA,EAAMW,iBACNd,gBAAgBiB,QD6CoBA,CAAMd,KAF9B,SAKApB,EAAAC,EAAAC,cAAA,UACIC,UAAU,4CACV2B,QAAS,SAACV,GAAD,OC/CP,SAACA,GACnBA,EAAMW,iBACNd,gBAAgBkB,SD6CoBA,CAAOf,KAF/B,aExCDgB,EAXA,SAACrC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAACmC,EAAD,CAASjC,QAAQ,mBACjBJ,EAAAC,EAAAC,cAACoC,EAAD,eCEDC,MARf,WACC,OACCvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACsC,EAAD,cCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.043b5b13.chunk.js","sourcesContent":["import React from 'react';\n\nconst Heading = (props) => {\n    return (\n        <h1 className=\"mt-1\">{props.heading}</h1>\n    );\n};\n\nexport default Heading;\n","import React, { useState } from 'react';\nimport { convertTextToSpeech, pause, resume } from '../../Helpers/Controls';\n\nconst Controls = (props) => {\n    let [message, setMessage] = useState(new SpeechSynthesisUtterance());\n\n    const changeHandler = (event) => {\n        message[event.target.name] = event.target.value;\n        setMessage(message);\n    };\n\n    // Stop speech when page reloads as initially on page load text is empty\n    if (message.text.trim().length === 0) {\n        speechSynthesis.cancel();\n    }\n\n    return (\n        <form onChange={(event) => changeHandler(event)}>\n            <textarea\n                rows=\"10\"\n                className=\"form-control mt-5\"\n                name=\"text\"\n                placeholder=\"Enter text for speech......\" />\n            <input\n                type=\"number\"\n                className=\"form-control mt-2\"\n                name=\"volume\"\n                placeholder=\"Set volume 0 to 1\"\n                step=\"0.1\"\n                max=\"1\"\n            />\n            <input\n                type=\"number\"\n                className=\"form-control mt-2\"\n                name=\"rate\"\n                placeholder=\"Set rate 0.1 to 10\"\n                max=\"10\"\n            />\n            <input\n                type=\"number\"\n                className=\"form-control mt-2\"\n                name=\"pitch\"\n                placeholder=\"Set pitch 0 to 2\"\n                max=\"2\"\n            />\n            <div className=\"control-buttons w-100 mt-3\">\n                <button\n                    className=\"col-md-3 btn btn-md btn-success mt-2\"\n                    onClick={(event) => convertTextToSpeech(event, message)}>\n                    Test\n            </button>\n                <button\n                    className=\"col-md-3 btn btn-md btn-success mt-2 ml-2\"\n                    onClick={(event) => pause(event)}>\n                    Pause\n            </button>\n                <button\n                    className=\"col-md-3 btn btn-md btn-success mt-2 ml-2\"\n                    onClick={(event) => resume(event)}>\n                    Resume\n            </button>\n            </div>\n        </form>\n    );\n};\n\nexport default Controls;\n","\nexport const convertTextToSpeech = (event, message) => {\n    event.preventDefault();\n    speechSynthesis.speak(message);\n};\n\nexport const pause = (event) => {\n    event.preventDefault();\n    speechSynthesis.pause();\n};\n\nexport const resume = (event) => {\n    event.preventDefault();\n    speechSynthesis.resume();\n};","\nimport React from 'react';\nimport Heading from '../Heading/Heading';\nimport Controls from '../Controls/Controls';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout col-md-10 offset-1 mt-5 text-center\">\n            <div className=\"message-controls col-md-6 offset-3\">\n                <Heading heading=\"Text To Speech\" />\n                <Controls />\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Layout />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}